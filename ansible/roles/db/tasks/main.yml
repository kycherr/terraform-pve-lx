- name: Ensure required Python libraries for PostgreSQL are installed
  apt:
    name:
      - python3-psycopg2
    state: present
    update_cache: yes

- name: Install PostgreSQL server
  apt:
    name: "postgresql-{{ pg_version }}"
    state: present
    update_cache: yes

- name: Install PostgreSQL client
  apt:
    name: "postgresql-client-{{ pg_version }}"
    state: present
    update_cache: yes

- name: Ensure PostgreSQL service is running
  service:
    name: postgresql
    state: started
    enabled: yes

- name: Temporarily set peer authentication for local postgres user
  lineinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/pg_hba.conf"
    regexp: '^local\s+all\s+postgres\s+.*$'
    line: 'local   all             postgres                                peer'
    state: present
  notify:
    - Restart PostgreSQL

- name: Set password for postgres user
  shell: |
    psql -U postgres -c "ALTER USER postgres PASSWORD '{{ db_pass }}';"
  become: yes
  become_user: postgres
  changed_when: false

- name: Configure md5 authentication for local postgres user
  lineinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/pg_hba.conf"
    regexp: '^local\s+all\s+postgres\s+peer$'
    line: 'local   all             postgres                                md5'
    state: present
  notify:
    - Restart PostgreSQL

- name: Allow remote connections in pg_hba.conf
  lineinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/pg_hba.conf"
    insertafter: '^# IPv4 local connections:'
    line: "host    all             all             0.0.0.0/0               md5"
    state: present
  notify:
    - Restart PostgreSQL

- name: Allow PostgreSQL to listen on all IP addresses
  lineinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
    regexp: '^#listen_addresses ='
    line: "listen_addresses = '*'"
    state: present
  notify:
    - Restart PostgreSQL

- name: Restart PostgreSQL if configuration changed
  service:
    name: postgresql
    state: restarted

- name: Create database user dynamically if not exists
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_pass }}"
    state: present
    role_attr_flags: LOGIN
    login_user: "postgres"
    login_password: "{{ db_pass }}"
    login_host: "{{ db_host }}"
    login_port: 5432

- name: Create database dynamically if not exists
  postgresql_db:
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
    encoding: "UTF8"
    state: present
    login_user: "postgres"
    login_password: "{{ db_pass }}"
    login_host: "{{ db_host }}"
    login_port: 5432

handlers:
  - name: Restart PostgreSQL
    service:
      name: postgresql
      state: restarted
